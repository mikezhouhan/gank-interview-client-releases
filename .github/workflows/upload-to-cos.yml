name: Upload to Tencent Cloud COS

# Required GitHub Secrets:
# - TENCENT_SECRET_ID: 腾讯云API密钥ID
# - TENCENT_SECRET_KEY: 腾讯云API密钥Key
# - TENCENT_COS_BUCKET: 腾讯云存储桶名称
# - TENCENT_COS_REGION: 腾讯云存储区域 (如: ap-beijing, ap-shanghai等)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to upload (e.g. v1.0.0)'
        required: true
        default: 'v0.0.1'

permissions:
  contents: read

jobs:
  upload-to-cos:
    runs-on: ubuntu-latest
    environment: default
    env:
      COS_DIRECTORY: "auto_updater"
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          # 安装 coscmd 用于文件操作
          pip install coscmd

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 创建下载目录
          mkdir -p downloads

          # 获取发布信息
          RELEASE_INFO=$(curl -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.release_tag }}")

          # 解析并下载每个资源文件
          echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | test("\\.(exe|dmg|zip|yml|blockmap)$")) | .browser_download_url + " " + .name' | while read url filename; do
            echo "正在下载 $filename 从 $url"
            curl -L -H "Authorization: token $GH_TOKEN" "$url" -o "downloads/$filename"
          done

          # 列出已下载的文件
          echo "已下载的文件:"
          ls -la downloads/
        
      
      - name: Upload to Tencent Cloud COS
        run: |
          # 配置 coscmd
          coscmd config -a ${{ secrets.TENCENT_SECRET_ID }} -s ${{ secrets.TENCENT_SECRET_KEY }} -b ${{ secrets.TENCENT_COS_BUCKET }} -r ${{ secrets.TENCENT_COS_REGION }}

          # 检查目标目录是否存在并删除其中的文件
          echo "检查目录 ${{ env.COS_DIRECTORY }} 是否存在..."
          if coscmd list ${{ env.COS_DIRECTORY }}/ > /dev/null 2>&1; then
            echo "目录 ${{ env.COS_DIRECTORY }} 存在，正在删除其中的文件..."

            # 获取 COS_DIRECTORY 中的文件和子目录列表
            coscmd list ${{ env.COS_DIRECTORY }}/ > file_list.txt 2>/dev/null || {
              echo "警告：无法列出目录中的文件"
            }

            # 删除 COS_DIRECTORY 中的每个文件和子目录
            while IFS= read -r line; do
              if [[ "$line" =~ ^[[:space:]]*[0-9]+ ]] || [[ "$line" =~ ^[[:space:]]*DIR ]]; then
                # 从行中提取文件/目录路径
                item_path=$(echo "$line" | awk '{print $NF}')
                if [[ "$item_path" == *"${{ env.COS_DIRECTORY }}/"* ]] && [[ "$item_path" != "${{ env.COS_DIRECTORY }}/" ]]; then
                  echo "正在删除: $item_path"
                  if [[ "$item_path" == *"/" ]]; then
                    # 这是一个目录
                    coscmd delete -r "$item_path" || echo "警告：删除 $item_path 失败"
                  else
                    # 这是一个文件
                    coscmd delete "$item_path" || echo "警告：删除 $item_path 失败"
                  fi
                fi
              fi
            done < file_list.txt

            rm -f file_list.txt
          else
            echo "目录 ${{ env.COS_DIRECTORY }} 不存在，将在上传时创建..."
          fi

          # 上传新文件到 COS_DIRECTORY 的子目录中
          echo "开始上传新文件..."
          cd downloads

          # 检查是否有文件需要上传
          if [ ! "$(ls -A .)" ]; then
            echo "下载目录中没有找到文件！"
            exit 1
          fi

          # 创建子目录路径: COS_DIRECTORY/latest/
          UPLOAD_PATH="${{ env.COS_DIRECTORY }}/latest"

          for file in *; do
            if [[ -f "$file" ]]; then
              echo "正在上传 $file 到 $UPLOAD_PATH/$file"
              coscmd upload "$file" "$UPLOAD_PATH/$file" || {
                echo "错误：上传 $file 失败"
                exit 1
              }
            fi
          done

          echo "上传完成！"
          echo "文件已上传到: $UPLOAD_PATH/"